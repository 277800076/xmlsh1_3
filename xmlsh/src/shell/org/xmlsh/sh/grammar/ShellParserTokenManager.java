/* Generated By:JavaCC: Do not edit this line. ShellParserTokenManager.java */
package org.xmlsh.sh.grammar;
import org.xmlsh.sh.core.*;
import java.io.PrintWriter;
import java.util.ArrayList;
import org.xmlsh.core.XEnvironment;

/** Token Manager. */
public class ShellParserTokenManager implements ShellParserConstants
{
  boolean in_for = false;
  boolean in_backtick = false;

  public void setInFor( boolean value )
  {
       // System.err.println("Setting in_for to " + value + " was " + in_for );
        in_for = value ;
  }

  public boolean getInFor(  )
  {
       // System.err.println("Getting in_for : " + in_for );
        return in_for;
  }

  private String readUntil(String end)
  {
    StringBuffer sb = new StringBuffer();
    char c;
    try
    {
      while ((c = input_stream.readChar()) > 0)
      {
        sb.append(c);
        if (sb.toString().endsWith(end))
        break;
      }
    }
    catch (Exception e)
    {}
    return sb.toString();
  }

  private String readXExpr()
  {
    return "<[" + readUntil("]>");
  }

  private String readBigquote()
  {
    return "<{{" + readUntil("}}>");
  }
  String readHere()
  {
    // Read up to NL then call readHere( word );
    char c;
    StringBuffer sb = new StringBuffer();
    try
    {
      while ((c = input_stream.readChar()) > 0)
      {
        if (c == '\u005cr')
        continue;
        if (c == '\u005cn')
        break;
        sb.append(c);
      }
    }
    catch (Exception e)
    {}
    return readHere(sb.toString().trim());
  }
  String readHere(String here_end)
  {
    StringBuffer sb = new StringBuffer("");
    char c;
    String estr = "\u005cn" + here_end + "\u005cn";
    try
    {
      while ((c = input_stream.readChar()) > 0)
      {
        if (c == '\u005cr')
        continue;
        sb.append(c);
        if (c == '\u005cn' &&
        sb.toString().endsWith(estr))
        {
          sb.setLength(sb.length() - estr.length() + 1);
          input_stream.backup(1);
          break;
        }
      }
    }
    catch( java.io.IOException e )
    {
      if( sb.toString().endsWith( "\u005cn" + here_end ) )
      {
          sb.setLength(sb.length() - here_end.length()   );
      }
   }

    catch (Exception e)
    {
      System.err.println(e);
    }
    return sb.toString();
  }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xa080000L) != 0L)
         {
            jjmatchedKind = 51;
            return 47;
         }
         if ((active0 & 0x170035f7c000L) != 0L)
         {
            jjmatchedKind = 51;
            return 80;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x28188000L) != 0L)
            return 80;
         if ((active0 & 0x17e74000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 1;
            }
            return 80;
         }
         return -1;
      case 2:
         if ((active0 & 0x39e74000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
            return 80;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x6000000L) != 0L)
            return 80;
         return -1;
      case 3:
         if ((active0 & 0x19804000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
            return 80;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 51;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x20670000L) != 0L)
            return 80;
         return -1;
      case 4:
         if ((active0 & 0x18000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 4;
            return 80;
         }
         if ((active0 & 0x1804000L) != 0L)
            return 80;
         return -1;
      case 5:
         if ((active0 & 0x10000000L) != 0L)
            return 80;
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 5;
            return 80;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 4);
      case 33:
         return jjStopAtPos(0, 31);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 46);
      case 49:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 50:
         return jjMoveStringLiteralDfa1_0(0x70000000000L);
      case 59:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 60:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x14200000003000L);
      case 62:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x80000000a00L);
      case 96:
         return jjStopAtPos(0, 61);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x204000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x20100000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x450000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xa080000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4020000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 123:
         return jjStopAtPos(0, 30);
      case 124:
         return jjStopAtPos(0, 49);
      case 125:
         return jjStopAtPos(0, 36);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 59:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 60:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x160000000000L);
      case 91:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x204000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 80);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000L);
      case 105:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x22000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L);
      case 124:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 38:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000000000L);
      case 45:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x28000000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 80);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x240000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x11004000L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 80);
         break;
      case 123:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 50:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 80);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 80);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 80);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 80);
         break;
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 80);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 80);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 80);
         break;
      case 104:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 80);
         break;
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 80);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 80);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 121:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(6, 27, 80);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 80;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
                  if ((0x87ffe41000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 40)
                     jjCheckNAdd(40);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 61)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 58)
                     jjCheckNAdd(52);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  else if (curChar == 36)
                     jjCheckNAdd(3);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  break;
               case 80:
                  if ((0x87ffe41000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  else if (curChar == 40)
                     jjCheckNAdd(40);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 65;
                  else if (curChar == 61)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 58)
                     jjCheckNAdd(52);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  else if (curChar == 36)
                     jjCheckNAdd(3);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  break;
               case 0:
                  if ((0x87ffe41000000000L & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  else if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(9, 13);
                  else if (curChar == 36)
                     jjCheckNAddStates(14, 18);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0x87ffe41000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 4:
                  jjAddStates(23, 24);
                  break;
               case 6:
                  if (curChar == 36)
                     jjCheckNAdd(3);
                  break;
               case 7:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(25, 28);
                  break;
               case 9:
                  if ((0x8000041a00000000L & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(6, 8);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 13:
                  jjCheckNAddStates(6, 8);
                  break;
               case 14:
                  if (curChar == 34 && kind > 51)
                     kind = 51;
                  break;
               case 15:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(16, 17);
                  break;
               case 17:
                  if (curChar == 39 && kind > 51)
                     kind = 51;
                  break;
               case 19:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(29, 31);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 61 && kind > 63)
                     kind = 63;
                  break;
               case 22:
                  if (curChar == 58)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(23, 21);
                  break;
               case 34:
                  if ((0x100000200L & l) != 0L)
                     jjAddStates(32, 33);
                  break;
               case 35:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(34, 38);
                  break;
               case 36:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 58)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(39, 41);
                  break;
               case 39:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddTwoStates(39, 41);
                  break;
               case 40:
                  if (curChar == 41 && kind > 66)
                     kind = 66;
                  break;
               case 41:
                  if (curChar == 40)
                     jjCheckNAdd(40);
                  break;
               case 49:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(9, 13);
                  break;
               case 50:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 58)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 53:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if (curChar == 40)
                     jjCheckNAdd(40);
                  break;
               case 55:
                  if (curChar == 36)
                     jjCheckNAddStates(14, 18);
                  break;
               case 56:
                  if (curChar == 40 && kind > 59)
                     kind = 59;
                  break;
               case 57:
                  if (curChar == 60)
                     jjCheckNAdd(56);
                  break;
               case 58:
                  if (curChar == 60 && kind > 60)
                     kind = 60;
                  break;
               case 59:
               case 60:
                  if (curChar == 40)
                     jjCheckNAdd(58);
                  break;
               case 61:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  break;
               case 65:
                  if (curChar == 61 && kind > 64)
                     kind = 64;
                  break;
               case 66:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 58)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(69, 21);
                  break;
               case 74:
                  if (curChar == 58)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 47:
                  if ((0x7fffffeafffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 80:
                  if ((0x7fffffeafffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  break;
               case 0:
                  if ((0x7fffffeafffffffL & l) != 0L)
                  {
                     if (kind > 51)
                        kind = 51;
                     jjCheckNAddStates(0, 2);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(9, 13);
                  if (curChar == 120)
                     jjAddStates(42, 43);
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x7fffffeafffffffL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 123)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar != 125)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(25, 28);
                  break;
               case 9:
                  if (curChar != 64)
                     break;
                  if (kind > 51)
                     kind = 51;
                  jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(6, 8);
                  break;
               case 12:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  jjAddStates(44, 45);
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(23, 21);
                  break;
               case 24:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 25:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 30:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(34, 38);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAddStates(39, 41);
                  break;
               case 42:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 43:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 48:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(9, 13);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 62:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(19, 22);
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(63, 21);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 66);
                  break;
               case 67:
                  if (curChar == 120)
                     jjAddStates(42, 43);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(69, 21);
                  break;
               case 70:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(75, 66);
                  break;
               case 76:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 77:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(23, 24);
                  break;
               case 11:
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(6, 8);
                  break;
               case 16:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(44, 45);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 80 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x172020000000L) != 0L)
         {
            jjmatchedKind = 55;
            return 69;
         }
         return -1;
      case 1:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 1;
            }
            return 69;
         }
         if ((active0 & 0x2000000000L) != 0L)
            return 69;
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      case 2:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 69;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 0;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 4);
      case 38:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 40:
         return jjStopAtPos(0, 33);
      case 41:
         return jjStopAtPos(0, 46);
      case 49:
         return jjMoveStringLiteralDfa1_1(0x100000000000L);
      case 50:
         return jjMoveStringLiteralDfa1_1(0x70000000000L);
      case 59:
         jjmatchedKind = 48;
         return jjMoveStringLiteralDfa1_1(0x400L);
      case 60:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_1(0x14200000003000L);
      case 62:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_1(0x80000000a00L);
      case 96:
         return jjStopAtPos(0, 61);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x2000000000L);
      case 123:
         return jjStopAtPos(0, 34);
      case 124:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_1(0x100L);
      case 125:
         return jjStopAtPos(0, 35);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         break;
      case 59:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 60:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1000L);
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x160000000000L);
      case 91:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 110:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_1(1, 37, 69);
         break;
      case 111:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000L);
      case 123:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L);
      case 124:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 38:
         return jjMoveStringLiteralDfa3_1(active0, 0x140000000000L);
      case 45:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(2, 12);
         break;
      case 62:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000L);
      case 123:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 49:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 50:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(3, 44);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(3, 29, 69);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 69;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xa7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(46, 51);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(52, 54);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(55, 60);
                  else if (curChar == 36)
                     jjCheckNAddStates(61, 65);
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 69:
                  if ((0xa7fffc3affffd9ffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(46, 51);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(52, 54);
                  else if (curChar == 40)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  else if (curChar == 36)
                     jjCheckNAddTwoStates(18, 19);
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 54;
                  else if (curChar == 61)
                  {
                     if (kind > 63)
                        kind = 63;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(42);
                  else if (curChar == 58)
                     jjCheckNAdd(38);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  else if (curChar == 36)
                     jjCheckNAdd(13);
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 55);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 23);
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if ((0xa7fffc3affffd9ffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 4:
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(52, 54);
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 8:
                  jjCheckNAddStates(52, 54);
                  break;
               case 9:
                  if (curChar != 34)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 10:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar != 39)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 14:
                  jjAddStates(70, 71);
                  break;
               case 16:
                  if (curChar == 36)
                     jjCheckNAdd(13);
                  break;
               case 17:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(18, 19);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(72, 78);
                  break;
               case 19:
                  if ((0x8000041a00000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 21:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if (curChar == 61 && kind > 63)
                     kind = 63;
                  break;
               case 24:
                  if (curChar == 58)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(25, 23);
                  break;
               case 35:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddStates(55, 60);
                  break;
               case 36:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 37:
                  if (curChar == 58)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 40 && kind > 53)
                     kind = 53;
                  break;
               case 40:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 41:
                  if (curChar == 46)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(42, 43);
                  break;
               case 43:
                  if (curChar == 40 && kind > 54)
                     kind = 54;
                  break;
               case 44:
                  if (curChar == 36)
                     jjCheckNAddStates(61, 65);
                  break;
               case 45:
                  if (curChar == 40 && kind > 59)
                     kind = 59;
                  break;
               case 46:
                  if (curChar == 60)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if (curChar == 60 && kind > 60)
                     kind = 60;
                  break;
               case 48:
               case 49:
                  if (curChar == 40)
                     jjCheckNAdd(47);
                  break;
               case 50:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 23);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 55);
                  break;
               case 54:
                  if (curChar == 61 && kind > 64)
                     kind = 64;
                  break;
               case 55:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 57:
                  if (curChar == 58)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 23);
                  break;
               case 63:
                  if (curChar == 58)
                     jjCheckNAdd(64);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xc7fffffeefffffffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(46, 51);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(55, 60);
                  if (curChar == 120)
                     jjAddStates(82, 83);
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 69:
                  if ((0xc7fffffeefffffffL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddStates(46, 51);
                  }
                  else if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(53, 55);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(52, 23);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0xc7fffffeefffffffL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 3:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 6:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(52, 54);
                  break;
               case 7:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  jjCheckNAddStates(52, 54);
                  break;
               case 11:
                  jjAddStates(84, 85);
                  break;
               case 13:
                  if (curChar == 123)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(14, 15);
                  break;
               case 15:
                  if (curChar != 125)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(72, 78);
                  break;
               case 19:
                  if (curChar != 64)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 20:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(22, 23);
                  break;
               case 25:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(25, 23);
                  break;
               case 26:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 27:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 32:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(55, 60);
                  break;
               case 36:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(36, 37);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(38, 39);
                  break;
               case 40:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(40, 41);
                  break;
               case 42:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjAddStates(86, 87);
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(66, 69);
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(52, 23);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(53, 55);
                  break;
               case 56:
                  if (curChar == 120)
                     jjAddStates(82, 83);
                  break;
               case 58:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(58, 23);
                  break;
               case 59:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 61:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(64, 55);
                  break;
               case 65:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 66:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 2:
               case 4:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 69:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddStates(46, 51);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
               case 8:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(52, 54);
                  break;
               case 11:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(84, 85);
                  break;
               case 14:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(70, 71);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 69 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_2(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 60:
         return jjMoveStringLiteralDfa1_2(0x14000000000000L);
      case 96:
         return jjStopAtPos(0, 62);
      default :
         return jjMoveNfa_2(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 91:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 123:
         return jjMoveStringLiteralDfa2_2(active0, 0x4000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 123:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         break;
      default :
         break;
   }
   return jjStartNfa_2(1, active0);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 42;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  else if (curChar == 36)
                     jjCheckNAddStates(92, 95);
                  else if (curChar == 35)
                  {
                     if (kind > 5)
                        kind = 5;
                     jjCheckNAdd(1);
                  }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddStates(96, 98);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 5:
                  if (curChar == 61 && kind > 63)
                     kind = 63;
                  break;
               case 6:
                  if (curChar == 58)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(18, 5);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 21);
                  break;
               case 20:
                  if (curChar == 61 && kind > 64)
                     kind = 64;
                  break;
               case 21:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 58)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(24, 5);
                  break;
               case 29:
                  if (curChar == 58)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(30, 21);
                  break;
               case 35:
                  if (curChar == 36)
                     jjCheckNAddStates(92, 95);
                  break;
               case 36:
                  if (curChar == 40 && kind > 59)
                     kind = 59;
                  break;
               case 37:
                  if (curChar == 60)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if (curChar == 60 && kind > 60)
                     kind = 60;
                  break;
               case 39:
               case 40:
                  if (curChar == 40)
                     jjCheckNAdd(38);
                  break;
               case 41:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  if (curChar == 120)
                     jjAddStates(99, 100);
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAddTwoStates(7, 5);
                  break;
               case 8:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 14:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddStates(88, 91);
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(18, 5);
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(19, 21);
                  break;
               case 22:
                  if (curChar == 120)
                     jjAddStates(99, 100);
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(24, 5);
                  break;
               case 25:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 26:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 30:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 21);
                  break;
               case 31:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 32:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 42 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 6, 7, 52, 53, 54, 11, 12, 14, 50, 51, 52, 53, 54, 3, 56, 
   57, 59, 61, 63, 21, 64, 66, 4, 5, 2, 8, 6, 7, 19, 20, 28, 
   34, 35, 36, 37, 38, 39, 41, 38, 39, 41, 73, 79, 16, 17, 2, 3, 
   5, 10, 16, 17, 6, 7, 9, 36, 37, 38, 39, 40, 41, 13, 45, 46, 
   48, 50, 52, 23, 53, 55, 14, 15, 2, 3, 5, 10, 18, 16, 17, 21, 
   22, 30, 62, 68, 11, 12, 42, 43, 18, 5, 19, 21, 36, 37, 39, 41, 
   3, 4, 12, 28, 34, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\12", null, "\73", "\46\46", "\174\174", "\76\76", 
"\73\73", "\76\174", "\74\74\55", "\74\74", "\143\141\164\143\150", "\151\146", 
"\145\154\151\146", "\164\150\145\156", "\145\154\163\145", "\146\151", "\144\157", 
"\143\141\163\145", "\145\163\141\143", "\167\150\151\154\145", "\165\156\164\151\154", 
"\146\157\162", "\164\162\171", "\146\151\156\141\154\154\171", "\162\145\164\165\162\156", 
"\144\157\156\145", "\173", "\41", "\50", "\50", "\173", "\175", "\175", "\151\156", "\74", "\76", 
"\62\76", "\62\76\76", "\62\76\46\61", "\76\46", "\61\76\46\62", "\74\46", "\51", "\46", 
"\73", "\174", "\74\173\173", null, "\74\133", null, null, null, null, null, null, 
null, null, "\140", "\140", null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "CMD",
   "NEVER",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 0, 0, -1, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 
   -1, 1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 0, -1, 1, 1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xf8ffffffffffffd1L, 0x5L, 
};
static final long[] jjtoSkip = {
   0x2eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x20L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[80];
private final int[] jjstateSet = new int[160];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ShellParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ShellParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 80; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
    matchedToken.image = readHere();
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
    matchedToken.image = readHere();
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
  setInFor(false) ;
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
    setInFor(true);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
    //System.err.println("got for: in_for is " + in_for);
    if (getInFor()) {
        matchedToken.kind = NAME ;
        SwitchTo(CMD);
    }
    setInFor(true);
         break;
      case 37 :
        image.append(jjstrLiteralImages[37]);
        lengthOfMatch = jjstrLiteralImages[37].length();
    if (!getInFor()) matchedToken.kind = WORD;
    setInFor(false);
         break;
      case 50 :
        image.append(jjstrLiteralImages[50]);
        lengthOfMatch = jjstrLiteralImages[50].length();
    matchedToken.image = readBigquote();
         break;
      case 52 :
        image.append(jjstrLiteralImages[52]);
        lengthOfMatch = jjstrLiteralImages[52].length();
    matchedToken.image = readXExpr();
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = matchedToken.image.substring( 0 , matchedToken.image.length() - 1 );
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    matchedToken.image = matchedToken.image.substring( 0 , matchedToken.image.length() - 1 );
         break;
      case 61 :
        image.append(jjstrLiteralImages[61]);
        lengthOfMatch = jjstrLiteralImages[61].length();
    if (in_backtick)
    {
      matchedToken.kind = BACKTICK2;
      in_backtick = false;
    }
    else in_backtick = true;
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
    if (matchedToken.image.startsWith("local") && !matchedToken.image.endsWith("="))
        matchedToken.image = matchedToken.image + "=";
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
