/* Generated By:JavaCC: Do not edit this line. ShellParser.java */
package org.xmlsh.sh.grammar;
import org.xmlsh.sh.core.*;
import java.io.PrintWriter;
import java.util.ArrayList;
import org.xmlsh.core.XEnvironment;

public class ShellParser implements ShellParserConstants {
  private String mSource;

  public ShellParser(java.io.InputStream stream, String encoding, String source)
  {
    this (stream, encoding);
    mSource = source;
  }

  public ShellParser(java.io.Reader stream, String source)
  {
    this (stream);
    mSource = source;
  }

  public String getSource()
  {
    return mSource;
  }

  public void ReInit(java.io.InputStream stream, String encoding, String source)
  {
    this.ReInit(stream, encoding);
    mSource = source;
  }

  public void ReInit(java.io.Reader stream, String source)
  {
    this.ReInit(stream);
    mSource = source;
  }

  public SourceLocation getLocation(Token t)
  {
    return new SourceLocation(getSource(), t == null ? token : t);
  }

  public void setLocation(Command command, Token t)
  {
    command.setLocation(getLocation(t));
  }

  public void setLocation(Command command)
  {
    setLocation(command, token);
  }

  final public Command script() throws ParseException {
  Command c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWLINE:
    case CSEMI:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case BANG:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      c = compound_list();
      jj_consume_token(0);
    {if (true) return c;}
      break;
    case 0:
      jj_consume_token(0);
     {if (true) return new NullCommand() ;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command command_line() throws ParseException {
  Command c;
  String op = "";
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case BANG:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      c = complete_command();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
      case SEMI:
        op = separator_op();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    if (op.equals("&"))
    c.setWait(false);
    {if (true) return c;}
      break;
    case NEWLINE:
      t = jj_consume_token(NEWLINE);
    c = new NullCommand();
    setLocation(c, t);
    {if (true) return c;}
      break;
    case 0:
      jj_consume_token(0);
    {if (true) return null;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command complete_command() throws ParseException {
  Command c;
    c = list();
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Command and_or() throws ParseException {
  AndOr andor = null;
  Command first;
  Command c = null;
  String op = null;
    first = pipeline();
    label_1:
    while (true) {
      if (jj_2_1(2147483647)) {
        ;
      } else {
        break label_1;
      }
      op = andor_if();
      linebreak();
      c = pipeline();
      if (andor == null)
      andor = new AndOr(first, op, c);
      else
      andor = new AndOr(andor, op, c);
    }
    {if (true) return andor == null ? first : andor;}
    throw new Error("Missing return statement in function");
  }

  final public String andor_if() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND_IF:
      t = jj_consume_token(AND_IF);
    {if (true) return t.toString();}
      break;
    case OR_IF:
      t = jj_consume_token(OR_IF);
    {if (true) return t.toString();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Pipeline pipeline() throws ParseException {
  Pipeline p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      p = pipe_sequence();
    {if (true) return p;}
      break;
    case BANG:
      jj_consume_token(BANG);
      p = pipe_sequence();
    p.setBang(true);
    {if (true) return p;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Pipeline pipe_sequence() throws ParseException {
  Pipeline p = new Pipeline(false);
  Command c;
    c = command();
    p.add(c);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(PIPE);
      linebreak();
      c = command();
      p.add(c);
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Command command() throws ParseException {
  SimpleCommand sc;
  CompoundCommand c;
  FunctionDeclaration f;
  IORedirectList r;
  ReturnStatement rs;
    if (jj_2_2(2)) {
      sc = simple_command();
    {if (true) return sc;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case CASE:
      case WHILE:
      case UNTIL:
      case FOR:
      case TRY:
      case LBRACE:
      case LPAREN:
        c = compound_command();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DGREAT:
        case CLOBBER:
        case DLESSMINUS:
        case DLESS:
        case LPAREN2:
        case LESS:
        case GT:
        case TGT:
        case TGTGT:
        case TGTAND1:
        case GTAND:
        case GTAND2:
          r = redirect_list();
      c.setRedirect(r);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
    {if (true) return c;}
        break;
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_3(2)) {
          f = function_declaration();
    {if (true) return f;}
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RETURN:
            rs = return_stmt();
    {if (true) return rs ;}
            break;
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CompoundCommand compound_command() throws ParseException {
  CompoundCommand c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      c = brace_group();
    {if (true) return c;}
      break;
    case LPAREN:
      c = subshell();
    {if (true) return c;}
      break;
    case FOR:
      c = for_clause();
      if (jj_2_4(2147483647)) {
        jj_consume_token(CSEMI);
      } else {
        ;
      }
    {if (true) return c;}
      break;
    case CASE:
      c = case_clause();
    {if (true) return c;}
      break;
    case IF:
      c = if_clause();
    {if (true) return c;}
      break;
    case TRY:
      c = trycatch_clause();
    {if (true) return c;}
      break;
    case WHILE:
      c = while_clause();
    {if (true) return c;}
      break;
    case UNTIL:
      c = until_clause();
    {if (true) return c;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SubShell subshell() throws ParseException {
  Command c;
    jj_consume_token(LPAREN);
    c = compound_list();
    jj_consume_token(RPAREN);
    {if (true) return new SubShell(c);}
    throw new Error("Missing return statement in function");
  }

  final public Command compound_list() throws ParseException {
  Command c;
  String op = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
      jj_consume_token(CSEMI);
      jj_consume_token(NEWLINE);
    {if (true) return new NullCommand();}
      break;
    case NEWLINE:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case BANG:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      if (jj_2_5(2147483647)) {
        newline_list();
      } else {
        ;
      }
      c = term();
      if (jj_2_6(2147483647)) {
        op = separator();
      } else {
        ;
      }
    if (op.length() > 0)
    token_source.SwitchTo(DEFAULT);
    if (op.equals("&"))
    c.setWait(false);
    {if (true) return c;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command list() throws ParseException {
  CommandList list = null;
  Command first;
  Command c;
  String op = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
      jj_consume_token(CSEMI);
      jj_consume_token(NEWLINE);
    {if (true) return new NullCommand();}
      break;
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case BANG:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      first = and_or();
      label_3:
      while (true) {
        if (jj_2_7(3)) {
          ;
        } else {
          break label_3;
        }
        op = separator_op();
        c = and_or();
      if (list == null)
      list = new CommandList(first, op, c);
      else
      list = new CommandList(list, op, c);
      }
    {if (true) return list == null ? first : list;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command term() throws ParseException {
  Command first;
  String op;
  Command c;
  CommandList list = null;
    first = and_or();
    label_4:
    while (true) {
      if (jj_2_8(2147483647)) {
        ;
      } else {
        break label_4;
      }
      op = separator();
      c = and_or();
      if (list == null)
      list = new CommandList(first, op, c);
      else
      list = new CommandList(list, op, c);
    }
    {if (true) return list == null ? first : list;}
    throw new Error("Missing return statement in function");
  }

  final public ForClause for_clause() throws ParseException {
  Command c;
  String n;
  WordList w = null;
  Token t;
  ForClause f;
    t = jj_consume_token(FOR);
    n = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWLINE:
    case SEMI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case SEMI:
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      token_source.setInFor(false);
      break;
    case IN:
      jj_consume_token(IN);
      w = wordlist();
      sequential_sep();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    c = do_group();
    f = new ForClause(n, w, c);
    setLocation(f, t);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public TryCatchFinally trycatch_clause() throws ParseException {
  Command cTry, cCatch, cFinally = null;
  String sCatch;
    jj_consume_token(TRY);
    linebreak();
    jj_consume_token(LBRACE);
    cTry = compound_list();
    jj_consume_token(RBRACE);
    linebreak();
    jj_consume_token(CATCH);
    sCatch = name();
    token_source.SwitchTo(DEFAULT);
    linebreak();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      jj_consume_token(LBRACE);
      break;
    case LBRACE2:
      jj_consume_token(LBRACE2);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    cCatch = compound_list();
    jj_consume_token(RBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINALLY:
      jj_consume_token(FINALLY);
      linebreak();
      jj_consume_token(LBRACE);
      cFinally = compound_list();
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    {if (true) return new TryCatchFinally(cTry, sCatch, cCatch, cFinally);}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
    {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String wordname() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
    {if (true) return t.toString();}
      break;
    case NAME:
      t = jj_consume_token(NAME);
    {if (true) return t.toString();}
      break;
    case XEXPR:
      t = jj_consume_token(XEXPR);
    {if (true) return t.toString();}
      break;
    case BIGQUOTE:
      t = jj_consume_token(BIGQUOTE);
    {if (true) return t.toString();}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public WordList wordlist() throws ParseException {
  WordList list = new WordList();
  Word w;
    label_5:
    while (true) {
      w = cmd_word();
      list.add(w);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE2:
      case BIGQUOTE:
      case NAME:
      case XEXPR:
      case FUNC_CALL_WORD:
      case METHOD_CALL_WORD:
      case WORD:
      case VAR_SUBPROC:
      case VAR_SUBPROC_FILE:
      case BACKTICK1:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_5;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CaseClause case_clause() throws ParseException {
  Word s;
  CaseList l = null;
    jj_consume_token(CASE);
    s = cmd_word();
    token_source.setInFor(true);
    linebreak();
    jj_consume_token(IN);
      token_source.setInFor(false);
    linebreak();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case WORD:
      l = case_list();
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    jj_consume_token(ESAC);
    {if (true) return new CaseClause(s, l);}
    throw new Error("Missing return statement in function");
  }

  final public CaseList case_list() throws ParseException {
  CaseList list = new CaseList();
  CaseItem c;
    label_6:
    while (true) {
      c = case_item();
      list.add(c);
      if (jj_2_9(2)) {
        ;
      } else {
        break label_6;
      }
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CaseItem case_item() throws ParseException {
  StringList p;
  Command c = null;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    p = pattern();
    t = jj_consume_token(RPAREN);
    //System.err.println("in_for is " + token_source.in_for );
    token_source.SwitchTo(DEFAULT);
    linebreak();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWLINE:
    case CSEMI:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case TRY:
    case RETURN:
    case LBRACE:
    case BANG:
    case LPAREN:
    case LBRACE2:
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
    case ASSIGN_WORD:
    case ASSIGN_WORDPE:
    case FUNC_DECL:
      c = compound_list();
      break;
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(DSEMI);
    linebreak();
    //System.err.println("in_for is " + token_source.in_for );

    {if (true) return new CaseItem(p, c, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public StringList pattern() throws ParseException {
  StringList list = new StringList();
  String s;
    s = wordname();
    list.add(s);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_7;
      }
      jj_consume_token(PIPE);
      s = wordname();
      list.add(s);
    }
    {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public IfClause if_clause() throws ParseException {
  Command ip = null, tp = null, ep = null;
  Token t;
  IfClause ifc;
    t = jj_consume_token(IF);
    ip = compound_list();
    jj_consume_token(THEN);
    tp = compound_list();
    if (jj_2_10(2)) {
      ep = else_part();
    } else {
      ;
    }
    jj_consume_token(FI);
    ifc = new IfClause(ip, tp, ep);
    setLocation(ifc, t);
    {if (true) return ifc;}
    throw new Error("Missing return statement in function");
  }

  final public Command else_part() throws ParseException {
  Command ip = null, tp = null, ep = null;
    if (jj_2_11(2)) {
      jj_consume_token(ELIF);
      ip = compound_list();
      jj_consume_token(THEN);
      tp = compound_list();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
      case ELSE:
        ep = else_part();
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    {if (true) return new IfClause(ip, tp, ep);}
    } else if (jj_2_12(2)) {
      jj_consume_token(ELSE);
      ep = compound_list();
    {if (true) return ep;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public WhileClause while_clause() throws ParseException {
  Command w, d;
    jj_consume_token(WHILE);
    w = compound_list();
    d = do_group();
    {if (true) return new WhileClause(w, d);}
    throw new Error("Missing return statement in function");
  }

  final public UntilClause until_clause() throws ParseException {
  Command w, d;
    jj_consume_token(UNTIL);
    w = compound_list();
    d = do_group();
    {if (true) return new UntilClause(w, d);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement return_stmt() throws ParseException {
  Word w ;
    jj_consume_token(RETURN);
    w = cmd_word();
    {if (true) return new ReturnStatement(w);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDeclaration function_declaration() throws ParseException {
  Token t;
  CompoundCommand b;
    t = jj_consume_token(FUNC_DECL);
    linebreak();
    b = function_body();
    String name = t.toString();
    if (name.startsWith("function"))
    name = name.replaceFirst("^function\u005c\u005cs*", "");
    name = name.replaceFirst("\u005c\u005cs*\u005c\u005c(\u005c\u005cs*\u005c\u005c)\u005c\u005cs*$", "");
    {if (true) return new
        FunctionDeclaration(name.trim(), b);}
    throw new Error("Missing return statement in function");
  }

  final public CompoundCommand function_body() throws ParseException {
  CompoundCommand c;
    c = compound_command();
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public BraceGroup brace_group() throws ParseException {
  Command c;
    jj_consume_token(LBRACE);
    c = compound_list();
    jj_consume_token(RBRACE);
    token_source.SwitchTo(CMD); // RBRACE sometimes doesnt switch to CMD due to lookahead and op processing
    {if (true) return new BraceGroup(c);}
    throw new Error("Missing return statement in function");
  }

  final public Command do_group() throws ParseException {
  Command c;
    jj_consume_token(DO);
    c = compound_list();
    jj_consume_token(DONE);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleCommand simple_command() throws ParseException {
  CommandPrefix p;
  Word c = null;
  CommandSuffix s = null;
  SimpleCommand sc = null;
  Token t = null;
    if (jj_2_14(2)) {
      p = cmd_prefix();
      if (jj_2_13(2)) {
        c = cmd_word();
      t = token;
      } else {
        ;
      }
      s = cmd_suffix();
    sc = new SimpleCommand(p, c, s);
    setLocation(sc, t);
    {if (true) return sc;}
    } else if (jj_2_15(2)) {
      c = cmd_word();
    t = token;
      s = cmd_suffix();
    sc = new SimpleCommand(null, c, s);
    setLocation(sc, t);
    {if (true) return sc;}
    } else if (jj_2_16(2)) {
      c = cmd_word();
    sc = new SimpleCommand(null, c, null);
    setLocation(sc);
    {if (true) return sc;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String cmd_name() throws ParseException {
  Token t;
    t = jj_consume_token(NAME);
    {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public Word cmd_word() throws ParseException {
  Word w;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case FUNC_CALL_WORD:
    case METHOD_CALL_WORD:
    case WORD:
    case VAR_SUBPROC:
    case VAR_SUBPROC_FILE:
    case BACKTICK1:
      w = cmd_word_expr();
    {if (true) return w;}
      break;
    case LBRACE2:
      jj_consume_token(LBRACE2);
      w = cmd_word_expr();
      jj_consume_token(RBRACE2);
    w.setExpand(false);
    {if (true) return w;}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public MethodCallWord method_call() throws ParseException {
  Token t;
  WordList wl;
    t = jj_consume_token(METHOD_CALL_WORD);
    wl = function_args();
    jj_consume_token(RPAREN);
    {if (true) return new MethodCallWord(t.toString(), wl);}
    throw new Error("Missing return statement in function");
  }

  final public Word cmd_word_expr() throws ParseException {
  Token t;
  String s;
  Command c;
  WordList wl;
  Word w;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNC_CALL_WORD:
      t = jj_consume_token(FUNC_CALL_WORD);
      wl = function_args();
      jj_consume_token(RPAREN);
    {if (true) return new FunctionCallWord(t.toString(), wl);}
      break;
    case METHOD_CALL_WORD:
      w = method_call();
        {if (true) return w ;}
      break;
    case NAME:
    case WORD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        t = jj_consume_token(WORD);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new StringWord(t.toString());}
      break;
    case BIGQUOTE:
    case XEXPR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XEXPR:
        t = jj_consume_token(XEXPR);
        break;
      case BIGQUOTE:
        t = jj_consume_token(BIGQUOTE);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new StringWord(t.toString());}
      break;
    case VAR_SUBPROC:
      t = jj_consume_token(VAR_SUBPROC);
      c = compound_list();
      jj_consume_token(RPAREN);
    {if (true) return new CommandWord(t.toString(), c);}
      break;
    case VAR_SUBPROC_FILE:
      t = jj_consume_token(VAR_SUBPROC_FILE);
      s = filename();
      jj_consume_token(RPAREN);
    {if (true) return new CommandFileWord(t.toString(), s);}
      break;
    case BACKTICK1:
      jj_consume_token(BACKTICK1);
      c = compound_list();
      jj_consume_token(BACKTICK2);
    {if (true) return new CommandWord("`", c);}
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public WordList function_args() throws ParseException {
  WordList wl = new WordList();
  Word w;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE2:
      case BIGQUOTE:
      case NAME:
      case XEXPR:
      case FUNC_CALL_WORD:
      case METHOD_CALL_WORD:
      case WORD:
      case VAR_SUBPROC:
      case VAR_SUBPROC_FILE:
      case BACKTICK1:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      w = cmd_word();
      wl.add(w);
    }
    {if (true) return wl;}
    throw new Error("Missing return statement in function");
  }

  final public CommandPrefix cmd_prefix() throws ParseException {
  CommandPrefix p = new CommandPrefix();
  Assign a;
    label_9:
    while (true) {
      a = assign();
      p.add(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN_WORD:
      case ASSIGN_WORDPE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
    }
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Assign assign() throws ParseException {
  Token t1;
  Word w = null;
  WordList ws;
  String s;
    if (jj_2_17(2)) {
      t1 = jj_consume_token(ASSIGN_WORD);
      w = cmd_word();
    s = t1.toString();
    {if (true) return new Assign(s.substring(0, s.length() - 1), "=", w);}
    } else if (jj_2_18(2)) {
      t1 = jj_consume_token(ASSIGN_WORDPE);
      w = cmd_word();
    s = t1.toString();
    {if (true) return new Assign(s.substring(0, s.length() - 2), "+=", w);}
    } else if (jj_2_19(2)) {
      t1 = jj_consume_token(ASSIGN_WORD);
      jj_consume_token(LPAREN2);
      ws = cmd_words();
      jj_consume_token(RPAREN);
    s = t1.toString();
    {if (true) return new Assign(s.substring(0, s.length() - 1), "=", ws);}
    } else if (jj_2_20(2)) {
      t1 = jj_consume_token(ASSIGN_WORDPE);
      jj_consume_token(LPAREN2);
      ws = cmd_words();
      jj_consume_token(RPAREN);
    s = t1.toString();
    {if (true) return new Assign(s.substring(0, s.length() - 2), "+=", ws);}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGN_WORD:
        t1 = jj_consume_token(ASSIGN_WORD);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CSEMI:
          jj_consume_token(CSEMI);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
    s = t1.toString();
    {if (true) return new Assign(s.substring(0, s.length() - 1), "=", new StringWord(""));}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public WordList cmd_words() throws ParseException {
  WordList ws = new WordList();
  Word w;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE2:
      case BIGQUOTE:
      case NAME:
      case XEXPR:
      case FUNC_CALL_WORD:
      case METHOD_CALL_WORD:
      case WORD:
      case VAR_SUBPROC:
      case VAR_SUBPROC_FILE:
      case BACKTICK1:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_10;
      }
      w = cmd_word();
      ws.add(w);
    }
    {if (true) return ws;}
    throw new Error("Missing return statement in function");
  }

  final public CommandSuffix cmd_suffix() throws ParseException {
  CommandSuffix s = new CommandSuffix();
  Word w;
  IORedirect io;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE2:
      case BIGQUOTE:
      case NAME:
      case XEXPR:
      case FUNC_CALL_WORD:
      case METHOD_CALL_WORD:
      case WORD:
      case VAR_SUBPROC:
      case VAR_SUBPROC_FILE:
      case BACKTICK1:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_11;
      }
      w = cmd_word();
      s.addArg(w);
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DGREAT:
      case CLOBBER:
      case DLESSMINUS:
      case DLESS:
      case LPAREN2:
      case LESS:
      case GT:
      case TGT:
      case TGTGT:
      case TGTAND1:
      case GTAND:
      case GTAND2:
        ;
        break;
      default:
        jj_la1[34] = jj_gen;
        break label_12;
      }
      io = io_redirect();
      s.addIO(io);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public IORedirectList redirect_list() throws ParseException {
  IORedirectList r = new IORedirectList();
  IORedirect io;
    label_13:
    while (true) {
      io = io_redirect();
      r.add(io);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DGREAT:
      case CLOBBER:
      case DLESSMINUS:
      case DLESS:
      case LPAREN2:
      case LESS:
      case GT:
      case TGT:
      case TGTGT:
      case TGTAND1:
      case GTAND:
      case GTAND2:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_13;
      }
    }
    {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public IORedirect io_redirect() throws ParseException {
  IOFile i = null;
  Word s;
  IOHere h = null;
  Word port = null;
  Word port2 = null;
    if (jj_2_21(5)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN2:
        port = portname();
        break;
      default:
        jj_la1[36] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DGREAT:
      case CLOBBER:
      case LESS:
      case GT:
        i = io_file();
        break;
      case DLESSMINUS:
      case DLESS:
        h = io_here();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    if (i != null)
    {if (true) return new IORedirect(port, i);}
    else
    {if (true) return new IORedirect(port, h);}
    } else if (jj_2_22(5)) {
      port = portname();
      jj_consume_token(GTAND);
      port2 = port_word();
    {if (true) return new IORedirect(port, new IOFile(">&", port2));}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN2:
        port = portname();
        jj_consume_token(LTAND);
        port2 = port_word();
    {if (true) return new IORedirect(port, new IOFile("<&", port2));}
        break;
      case TGT:
        jj_consume_token(TGT);
        s = filename_word();
    {if (true) return new IORedirect(null, new IOFile("2>", s));}
        break;
      case TGTGT:
        jj_consume_token(TGTGT);
        s = filename_word();
    {if (true) return new IORedirect(null, new IOFile("2>>", s));}
        break;
      case TGTAND1:
        jj_consume_token(TGTAND1);
    {if (true) return new IORedirect(null, new IOFile("2>&1", null));}
        break;
      case GTAND:
        jj_consume_token(GTAND);
    {if (true) return new IORedirect(null, new IOFile(">&", null));}
        break;
      case GTAND2:
        jj_consume_token(GTAND2);
    {if (true) return new IORedirect(null, new IOFile("1>&2", null));}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Word portname() throws ParseException {
  Word port = null;
    jj_consume_token(LPAREN2);
    port = cmd_word();
    jj_consume_token(RPAREN);
    {if (true) return port;}
    throw new Error("Missing return statement in function");
  }

  final public IOFile io_file() throws ParseException {
  Token t;
  Word s;
  String num;
  Command c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
      s = filename_word();
    {if (true) return new IOFile("<", s);}
      break;
    case GT:
      jj_consume_token(GT);
      s = filename_word();
    {if (true) return new IOFile(">", s);}
      break;
    case DGREAT:
      jj_consume_token(DGREAT);
      s = filename_word();
    {if (true) return new IOFile(">>", s);}
      break;
    case CLOBBER:
      t = jj_consume_token(CLOBBER);
      s = filename_word();
    {if (true) return new IOFile(t.toString(), s);}
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String filename() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
    {if (true) return t.toString();}
      break;
    case NAME:
      t = jj_consume_token(NAME);
    {if (true) return t.toString();}
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Word filename_word() throws ParseException {
  Word w;
  Token t;
  String s;
  Command c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case LPAREN2:
      w = port_word();
    {if (true) return w;}
      break;
    case BIGQUOTE:
    case NAME:
    case XEXPR:
    case WORD:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        t = jj_consume_token(WORD);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      case XEXPR:
        t = jj_consume_token(XEXPR);
        break;
      case BIGQUOTE:
        t = jj_consume_token(BIGQUOTE);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new StringWord(t.toString());}
      break;
    case VAR_SUBPROC:
      t = jj_consume_token(VAR_SUBPROC);
      c = compound_list();
      jj_consume_token(RPAREN);
    {if (true) return new CommandWord(t.toString(), c);}
      break;
    case VAR_SUBPROC_FILE:
      t = jj_consume_token(VAR_SUBPROC_FILE);
      s = filename();
      jj_consume_token(RPAREN);
    {if (true) return new CommandFileWord(t.toString(), s);}
      break;
    case LBRACE:
    case LBRACE2:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        jj_consume_token(LBRACE);
        break;
      case LBRACE2:
        jj_consume_token(LBRACE2);
        break;
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case WORD:
        t = jj_consume_token(WORD);
        break;
      case NAME:
        t = jj_consume_token(NAME);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RBRACE2:
        jj_consume_token(RBRACE2);
        break;
      case RBRACE:
        jj_consume_token(RBRACE);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    {if (true) return new StringWord("{" + t.toString() + "}");}
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Word port_word() throws ParseException {
  Word w;
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    case LPAREN2:
      jj_consume_token(LPAREN2);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RPAREN);
    {if (true) return new StringWord("(" + t.toString() + ")");}
    throw new Error("Missing return statement in function");
  }

  final public IOHere io_here() throws ParseException {
  Token tless;
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DLESS:
      tless = jj_consume_token(DLESS);
    {if (true) return new IOHere("<<", tless.toString());}
      break;
    case DLESSMINUS:
      tless = jj_consume_token(DLESSMINUS);
    {if (true) return new IOHere("<<-", tless.toString());}
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void newline_list() throws ParseException {
    label_14:
    while (true) {
      jj_consume_token(NEWLINE);
      if (jj_2_23(2147483647)) {
        ;
      } else {
        break label_14;
      }
    }
  }

  final public void linebreak() throws ParseException {
    label_15:
    while (true) {
      if (jj_2_24(2147483647)) {
        ;
      } else {
        break label_15;
      }
      jj_consume_token(NEWLINE);
    }
  }

  final public String separator_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP:
      jj_consume_token(AMP);
    {if (true) return "&";}
      break;
    case SEMI:
      jj_consume_token(SEMI);
    {if (true) return ";";}
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String separator() throws ParseException {
  String op;
    if (jj_2_26(2147483647)) {
      newline_list();
    {if (true) return "\u005cn";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
      case SEMI:
        op = separator_op();
        if (jj_2_25(2147483647)) {
          newline_list();
        } else {
          ;
        }
    {if (true) return op;}
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void sequential_sep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      linebreak();
      break;
    case NEWLINE:
      newline_list();
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(VAR_SUBPROC_FILE)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(VAR_SUBPROC)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(CSEMI)) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(DONE)) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(CSEMI)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(CLOBBER)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(DGREAT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(FUNC_DECL)) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(LPAREN2)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(GTAND2)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_scan_token(GTAND)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(TGTAND1)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_54()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(TGTGT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(TGT)) return true;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(LTAND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(GTAND)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_107()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_108()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_25()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    if (jj_scan_token(FI)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    if (jj_3R_126()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(OR_IF)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(AND_IF)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_59()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_50()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_16()) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_36()) return true;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_scan_token(DSEMI)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    if (jj_3_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(ASSIGN_WORD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_scan_token(ASSIGN_WORDPE)) return true;
    if (jj_scan_token(LPAREN2)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_26()) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    if (jj_scan_token(ESAC)) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(ASSIGN_WORD)) return true;
    if (jj_scan_token(LPAREN2)) return true;
    if (jj_3R_140()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(ASSIGN_WORDPE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(ASSIGN_WORD)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    if (jj_3R_137()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_137()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(BIGQUOTE)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(XEXPR)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    if (jj_3R_49()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_119()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(BACKTICK1)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(BACKTICK2)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) return true;
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(VAR_SUBPROC_FILE)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(VAR_SUBPROC)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    if (jj_3R_36()) return true;
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_128()) return true;
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_3R_25()) return true;
    if (jj_scan_token(RBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) return true;
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_134()) return true;
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(FUNC_CALL_WORD)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_128()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    }
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(METHOD_CALL_WORD)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    if (jj_scan_token(4)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_20()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(DLESSMINUS)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_20()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(DLESS)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(LBRACE2)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RBRACE2)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_21()) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_26()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ShellParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[52];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xd7a08051,0x0,0x11,0xd7a08051,0x180,0xd7a08000,0x0,0x3a00,0x47a08000,0x10000000,0x47a08000,0xd7a08050,0xd7a08040,0x10,0x10,0x40000000,0x8000000,0x0,0x0,0x0,0x0,0xd7a08050,0x0,0x50000,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x3a00,0x3a00,0x0,0x3a00,0x0,0xa00,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x3000,0x0,0x0,0x10,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xb8fc0005,0x18000,0x0,0xb8fc0005,0x0,0xb8fc0005,0x20000,0x1fc2,0x1,0x0,0x1,0xb8fc0005,0xb8fc0005,0x10000,0x10020,0x4,0x0,0x9c0000,0x38fc0004,0x9c0001,0x1,0xb8fc0005,0x20000,0x0,0x38fc0004,0x880000,0x140000,0x38fc0000,0x38fc0004,0x80000000,0x0,0x80000000,0x38fc0004,0x38fc0004,0x1fc2,0x1fc2,0x2,0xc0,0x1f02,0xc0,0x880000,0x9c0000,0x4,0x880000,0x18,0x189c0007,0x3,0x880000,0x0,0x18000,0x18000,0x10000,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x5,0x0,0x0,0x5,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x5,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[26];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public ShellParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ShellParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public ShellParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public ShellParser(ShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 52; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[68];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 52; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 68; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 26; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
