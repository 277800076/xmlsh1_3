/* Generated By:JavaCC: Do not edit this line. ShellParser.java */
package org.xmlsh.sh.grammar;
import org.xmlsh.sh.core.*;

import java.io.PrintWriter;
import java.util.ArrayList;
import org.xmlsh.core.XEnvironment;
 
public class ShellParser implements ShellParserConstants {

  final public Command script() throws ParseException {
        Command c;
    c = compound_list();
    jj_consume_token(0);
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Command command_line() throws ParseException {
        Command c;
         String op="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case LBRACE:
    case BANG:
    case LPAREN:
    case NAME:
    case XEXPR:
    case WORD:
    case VAR_SUBPROC:
    case ASSIGN_WORD:
      c = complete_command();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
      case SEMI:
        op = separator_op();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                if( op.equals("&") )
                  c.setWait(false);
                {if (true) return c;}
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
                    {if (true) return new NullCommand() ;}
      break;
    case 0:
      jj_consume_token(0);
                  {if (true) return null ;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command complete_command() throws ParseException {
          Command c;
    c = list();
                {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public Command and_or() throws ParseException {
                AndOr   andor=null;
                Command first;
                Command c       =       null;
                String  op      =       null;
    first = pipeline();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND_IF:
      case OR_IF:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      op = andor_if();
      linebreak();
      c = pipeline();
                        if( andor == null )
                                andor = new AndOr( first , op , c );
                        else
                                andor = new AndOr( andor , op , c );
    }
                {if (true) return andor == null ? first : andor ;}
    throw new Error("Missing return statement in function");
  }

  final public String andor_if() throws ParseException {
         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND_IF:
      t = jj_consume_token(AND_IF);
                  {if (true) return t.toString();}
      break;
    case OR_IF:
      t = jj_consume_token(OR_IF);
                  {if (true) return t.toString();}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Pipeline pipeline() throws ParseException {
          Pipeline p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case LBRACE:
    case LPAREN:
    case NAME:
    case XEXPR:
    case WORD:
    case VAR_SUBPROC:
    case ASSIGN_WORD:
      p = pipe_sequence();
                  {if (true) return p ;}
      break;
    case BANG:
      jj_consume_token(BANG);
      p = pipe_sequence();
          p.setBang(true) ; {if (true) return p ;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Pipeline pipe_sequence() throws ParseException {
                Pipeline p = new Pipeline(false);  Command c;
    c = command();
                      p.add(c);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_2;
      }
      jj_consume_token(PIPE);
      linebreak();
      c = command();
                                            p.add(c);
    }
                 {if (true) return p ;}
    throw new Error("Missing return statement in function");
  }

  final public Command command() throws ParseException {
    SimpleCommand sc;
        CompoundCommand c;
        FunctionDefinition f;
        IORedirectList  r;
    if (jj_2_2(2)) {
      sc = simple_command();
          {if (true) return sc ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case CASE:
      case WHILE:
      case UNTIL:
      case FOR:
      case LBRACE:
      case LPAREN:
        c = compound_command();
        if (jj_2_1(2)) {
          r = redirect_list();
                                                                    c.setRedirect(r);
        } else {
          ;
        }
                  {if (true) return c;}
        break;
      default:
        jj_la1[7] = jj_gen;
        if (jj_2_3(2)) {
          f = function_definition();
          {if (true) return f ;}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public CompoundCommand compound_command() throws ParseException {
        CompoundCommand c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      c = brace_group();
          {if (true) return c ;}
      break;
    case LPAREN:
      c = subshell();
          {if (true) return c ;}
      break;
    case FOR:
      c = for_clause();
          {if (true) return c ;}
      break;
    case CASE:
      c = case_clause();
          {if (true) return c ;}
      break;
    case IF:
      c = if_clause();
          {if (true) return c ;}
      break;
    case WHILE:
      c = while_clause();
          {if (true) return c ;}
      break;
    case UNTIL:
      c = until_clause();
          {if (true) return c ;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SubShell subshell() throws ParseException {
  Command c ;
    jj_consume_token(LPAREN);
    c = compound_list();
    jj_consume_token(RPAREN);
                                             {if (true) return new SubShell(c);}
    throw new Error("Missing return statement in function");
  }

  final public Command compound_list() throws ParseException {
  Command c; String op="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
      jj_consume_token(CSEMI);
      jj_consume_token(NEWLINE);
                       {if (true) return new NullCommand() ;}
      break;
    case NEWLINE:
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case LBRACE:
    case BANG:
    case LPAREN:
    case NAME:
    case XEXPR:
    case WORD:
    case VAR_SUBPROC:
    case ASSIGN_WORD:
      if (jj_2_4(2147483647)) {
        newline_list();
      } else {
        ;
      }
      c = term();
      if (jj_2_5(2147483647)) {
        op = separator();
      } else {
        ;
      }
                if( op.length() > 0 )
                        token_source.SwitchTo(DEFAULT);
                if( op.equals("&") )
                        c.setWait(false);
                {if (true) return c;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command list() throws ParseException {
                CommandList     list=null;
                Command first;
                Command c;
                String op=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CSEMI:
      jj_consume_token(CSEMI);
      jj_consume_token(NEWLINE);
                      {if (true) return new NullCommand() ;}
      break;
    case IF:
    case CASE:
    case WHILE:
    case UNTIL:
    case FOR:
    case LBRACE:
    case BANG:
    case LPAREN:
    case NAME:
    case XEXPR:
    case WORD:
    case VAR_SUBPROC:
    case ASSIGN_WORD:
      first = and_or();
      label_3:
      while (true) {
        if (jj_2_6(3)) {
          ;
        } else {
          break label_3;
        }
        op = separator_op();
        c = and_or();
                        if( list == null )
                                list = new CommandList( first , op , c );
                        else
                                list = new CommandList( list , op , c );
      }
                        {if (true) return list == null ? first : list ;}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Command term() throws ParseException {
        Command first;
        String op;
        Command c;
        CommandList list=null;
    first = and_or();
    label_4:
    while (true) {
      if (jj_2_7(999999999)) {
        ;
      } else {
        break label_4;
      }
      op = separator();
      c = and_or();
                        if( list == null )
                                list = new CommandList( first , op , c );
                        else
                                list = new CommandList( list , op , c );
    }
                        {if (true) return list == null ? first : list ;}
    throw new Error("Missing return statement in function");
  }

  final public ForClause for_clause() throws ParseException {
                Command c;
                String n;
                StringList w = null;
    jj_consume_token(FOR);
    n = name();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEWLINE:
    case SEMI:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        jj_consume_token(NEWLINE);
        break;
      case SEMI:
        jj_consume_token(SEMI);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                              token_source.in_for=false;
      break;
    case IN:
      jj_consume_token(IN);
      w = wordlist();
      sequential_sep();
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    c = do_group();
                {if (true) return new ForClause( n ,w, c );}
    throw new Error("Missing return statement in function");
  }

  final public String name() throws ParseException {
         Token t;
    t = jj_consume_token(NAME);
          {if (true) return t.toString() ;}
    throw new Error("Missing return statement in function");
  }

  final public String wordname() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
                    {if (true) return t.toString();}
      break;
    case NAME:
      t = jj_consume_token(NAME);
                    {if (true) return t.toString();}
      break;
    case XEXPR:
      t = jj_consume_token(XEXPR);
                    {if (true) return t.toString();}
      break;
    case VAR_SUBPROC:
      t = jj_consume_token(VAR_SUBPROC);
                      {if (true) return t.toString();}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public StringList wordlist() throws ParseException {
                StringList list = new StringList();
                String s;
    label_5:
    while (true) {
      s = wordname();
                         list.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case XEXPR:
      case WORD:
      case VAR_SUBPROC:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
    }
          {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public CaseClause case_clause() throws ParseException {
                String  s;
                CaseList l=null;
    jj_consume_token(CASE);
    s = cmd_word();
                             token_source.in_for=true;
    linebreak();
    jj_consume_token(IN);
    linebreak();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case NAME:
    case XEXPR:
    case WORD:
    case VAR_SUBPROC:
      l = case_list();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(ESAC);
          {if (true) return new CaseClause( s , l ) ;}
    throw new Error("Missing return statement in function");
  }

  final public CaseList case_list() throws ParseException {
                CaseList list = new CaseList(); CaseItem c;
    label_6:
    while (true) {
      c = case_item();
                   list.add( c );
      if (jj_2_8(2)) {
        ;
      } else {
        break label_6;
      }
    }
                  {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public CaseItem case_item() throws ParseException {
         StringList p; Command c;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    p = pattern();
    jj_consume_token(RPAREN);
    c = compound_list();
    jj_consume_token(DSEMI);
    linebreak();
          {if (true) return new CaseItem( p , c );}
    throw new Error("Missing return statement in function");
  }

  final public StringList pattern() throws ParseException {
          StringList list = new StringList(); String s;
    s = wordname();
                       list.add(s);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(PIPE);
      s = wordname();
                                         list.add(s);
    }
                {if (true) return list ;}
    throw new Error("Missing return statement in function");
  }

  final public IfClause if_clause() throws ParseException {
          Command ip=null,tp=null,ep=null;
    jj_consume_token(IF);
    ip = compound_list();
    jj_consume_token(THEN);
    tp = compound_list();
    if (jj_2_9(2)) {
      ep = else_part();
    } else {
      ;
    }
    jj_consume_token(FI);
          {if (true) return new IfClause( ip , tp , ep );}
    throw new Error("Missing return statement in function");
  }

  final public Command else_part() throws ParseException {
                        Command ip=null,tp=null,ep=null;
    if (jj_2_10(2)) {
      jj_consume_token(ELIF);
      ip = compound_list();
      jj_consume_token(THEN);
      tp = compound_list();
      ep = else_part();
          {if (true) return new IfClause( ip , tp , ep );}
    } else if (jj_2_11(2)) {
      jj_consume_token(ELSE);
      ep = compound_list();
          {if (true) return ep ;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public WhileClause while_clause() throws ParseException {
         Command w,d;
    jj_consume_token(WHILE);
    w = compound_list();
    d = do_group();
                  {if (true) return new WhileClause( w,d);}
    throw new Error("Missing return statement in function");
  }

  final public UntilClause until_clause() throws ParseException {
         Command w,d;
    jj_consume_token(UNTIL);
    w = compound_list();
    d = do_group();
                          {if (true) return new UntilClause( w,d);}
    throw new Error("Missing return statement in function");
  }

  final public FunctionDefinition function_definition() throws ParseException {
    fname();
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    linebreak();
    function_body();
          {if (true) return new FunctionDefinition() ;}
    throw new Error("Missing return statement in function");
  }

  final public void function_body() throws ParseException {
    compound_command();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DLESS:
    case DGREAT:
    case LESSAND:
    case GREATAND:
    case LESSGREAT:
    case DLESSDASH:
    case CLOBBER:
    case LESS:
    case GT:
    case TGT:
      redirect_list();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
  }

  final public String fname() throws ParseException {
         Token t;
    t = jj_consume_token(NAME);
                  {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public BraceGroup brace_group() throws ParseException {
          Command c;
    jj_consume_token(LBRACE);
    c = compound_list();
    jj_consume_token(RBRACE);
                token_source.SwitchTo(CMD);     // RBRACE sometimes doesnt switch to CMD due to lookahead and op processing

                {if (true) return new BraceGroup(c);}
    throw new Error("Missing return statement in function");
  }

  final public Command do_group() throws ParseException {
         Command c;
    jj_consume_token(DO);
    c = compound_list();
    jj_consume_token(DONE);
          {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final public SimpleCommand simple_command() throws ParseException {
                CommandPrefix p;
                String c=null;
                CommandSuffix s=null;
    if (jj_2_13(2)) {
      p = cmd_prefix();
      if (jj_2_12(2)) {
        c = cmd_word();
      } else {
        ;
      }
      s = cmd_suffix();
          {if (true) return new SimpleCommand( p , c ,s );}
    } else if (jj_2_14(2)) {
      c = cmd_word();
      s = cmd_suffix();
          {if (true) return new SimpleCommand( null , c , s);}
    } else if (jj_2_15(2)) {
      c = cmd_word();
                  {if (true) return new SimpleCommand( null , c , null  );}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String cmd_name() throws ParseException {
                     Token t;
    t = jj_consume_token(NAME);
          {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String cmd_word() throws ParseException {
         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
      break;
    case NAME:
      t = jj_consume_token(NAME);
      break;
    case XEXPR:
      t = jj_consume_token(XEXPR);
      break;
    case VAR_SUBPROC:
      t = jj_consume_token(VAR_SUBPROC);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  final public CommandPrefix cmd_prefix() throws ParseException {
                CommandPrefix p = new CommandPrefix();
                Token t1;
                String s1;
    label_8:
    while (true) {
      t1 = jj_consume_token(ASSIGN_WORD);
      s1 = cmd_word();
                  p.add( t1.toString() + s1 );
      if (jj_2_16(2)) {
        ;
      } else {
        break label_8;
      }
    }
                {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public CommandSuffix cmd_suffix() throws ParseException {
                CommandSuffix s = new CommandSuffix();
                String str;
                IORedirect io;
                Token t;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
      case XEXPR:
      case WORD:
      case VAR_SUBPROC:
        ;
        break;
      default:
        jj_la1[20] = jj_gen;
        break label_9;
      }
      str = cmd_word();
        s.addArg(str);
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DLESS:
      case DGREAT:
      case LESSAND:
      case GREATAND:
      case LESSGREAT:
      case DLESSDASH:
      case CLOBBER:
      case LESS:
      case GT:
      case TGT:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_10;
      }
      io = io_redirect();
                        s.addIO( io);
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public IORedirectList redirect_list() throws ParseException {
          IORedirectList r = new IORedirectList();
          IORedirect io;
    label_11:
    while (true) {
      io = io_redirect();
                             r.add(io);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DLESS:
      case DGREAT:
      case LESSAND:
      case GREATAND:
      case LESSGREAT:
      case DLESSDASH:
      case CLOBBER:
      case LESS:
      case GT:
      case TGT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_11;
      }
    }
          {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public IORedirect io_redirect() throws ParseException {
           IORedirect i;  Token t; IOHere h;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DGREAT:
    case LESSAND:
    case GREATAND:
    case LESSGREAT:
    case CLOBBER:
    case LESS:
    case GT:
    case TGT:
      i = io_file();
                                                  {if (true) return i;}
      break;
    case DLESS:
    case DLESSDASH:
      h = io_here();
                                                  {if (true) return new IORedirect( h);}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IORedirect io_file() throws ParseException {
          Token t; String s; String num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESS:
      jj_consume_token(LESS);
      s = filename();
                  {if (true) return new IORedirect( new IOFile( "<" , s ));}
      break;
    case LESSAND:
      t = jj_consume_token(LESSAND);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( t.toString() , s ));}
      break;
    case TGT:
      jj_consume_token(TGT);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( "2>" , s ));}
      break;
    case GT:
      jj_consume_token(GT);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( ">" , s ));}
      break;
    case DGREAT:
      jj_consume_token(DGREAT);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( ">>" , s ));}
      break;
    case GREATAND:
      t = jj_consume_token(GREATAND);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( t.toString() , s ));}
      break;
    case LESSGREAT:
      t = jj_consume_token(LESSGREAT);
      s = filename();
                  {if (true) return new IORedirect(new IOFile(t.toString() , s ));}
      break;
    case CLOBBER:
      t = jj_consume_token(CLOBBER);
      s = filename();
                  {if (true) return new IORedirect(new IOFile( t.toString() , s ));}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String filename() throws ParseException {
         Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WORD:
      t = jj_consume_token(WORD);
                   {if (true) return t.toString() ;}
      break;
    case NAME:
      t = jj_consume_token(NAME);
                   {if (true) return t.toString() ;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public IOHere io_here() throws ParseException {
          Token tless ; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DLESS:
      tless = jj_consume_token(DLESS);
      break;
    case DLESSDASH:
      tless = jj_consume_token(DLESSDASH);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    s = here_end();
                String body = token_source.readHere(s);


                {if (true) return new IOHere(tless.toString(),body);}
    throw new Error("Missing return statement in function");
  }

  final public String here_end() throws ParseException {
          String t;
    t = cmd_word();
    jj_consume_token(NEWLINE);
                                 {if (true) return t ;}
    throw new Error("Missing return statement in function");
  }

  final public void newline_list() throws ParseException {
    label_12:
    while (true) {
      jj_consume_token(NEWLINE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_12;
      }
    }
  }

  final public void linebreak() throws ParseException {
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_13;
      }
      jj_consume_token(NEWLINE);
    }
  }

  final public String separator_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMP:
      jj_consume_token(AMP);
                  {if (true) return "&" ;}
      break;
    case SEMI:
      jj_consume_token(SEMI);
                   {if (true) return ";" ;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String separator() throws ParseException {
         String op;
    if (jj_2_18(2147483647)) {
      newline_list();
                  {if (true) return "\n" ;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AMP:
      case SEMI:
        op = separator_op();
        if (jj_2_17(2147483647)) {
          label_14:
          while (true) {
            jj_consume_token(NEWLINE);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case NEWLINE:
              ;
              break;
            default:
              jj_la1[30] = jj_gen;
              break label_14;
            }
          }
        } else {
          ;
        }
                  {if (true) return op;}
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void sequential_sep() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMI:
      jj_consume_token(SEMI);
      linebreak();
      break;
    case NEWLINE:
      newline_list();
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  final private boolean jj_3_2() {
    if (jj_3R_16()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3_3()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(LESSAND)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_63()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_25()) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_46()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_scan_token(ESAC)) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(BANG)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    if (jj_3R_103()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_103()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(OR_IF)) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_34()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    if (jj_3R_28()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(AND_IF)) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(XEXPR)) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(VAR_SUBPROC)) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(4)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_34()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_scan_token(ASSIGN_WORD)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    Token xsp;
    if (jj_3_16()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_94()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) return true;
    }
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_19()) return true;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_19()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_21()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_3R_20()) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_25()) return true;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_25()) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_12()) jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(DONE)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    if (jj_scan_token(4)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_scan_token(SEMI)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    xsp = jj_scanpos;
    if (jj_3R_102()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_29()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_46()) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) return true;
    }
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_scan_token(AMP)) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_scan_token(CSEMI)) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_18()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) return true;
    }
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    Token xsp;
    if (jj_scan_token(4)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(4)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_92()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(NEWLINE)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_3R_91()) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3_11()) return true;
    }
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) jj_scanpos = xsp;
    if (jj_scan_token(FI)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_3R_88()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_87()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) return true;
    }
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_86()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_scan_token(IN)) return true;
    if (jj_3R_99()) return true;
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(NAME)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_48()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_17()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(CLOBBER)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(DSEMI)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_75()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_scan_token(LESSGREAT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(GREATAND)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(DGREAT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_22()) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    Token xsp;
    if (jj_3_8()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_8()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(TGT)) return true;
    if (jj_3R_74()) return true;
    return false;
  }

  public ShellParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x0,0x11,0xfd020051,0x180,0x180,0xfd020000,0x0,0xbd020000,0xbd020000,0xfd020050,0xfd020040,0x10,0x10,0x0,0x0,0x80000000,0x80000000,0x0,0x1fc00,0x0,0x0,0x1fc00,0x1fc00,0x1fc00,0x17800,0x0,0x8400,0x10,0x10,0x0,0x10,0x0,0x10,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xc0,0x0,0x30e00,0x0,0x0,0x30e00,0x100,0x0,0x0,0x30e00,0x30e00,0x80,0x82,0x10e00,0x10e00,0x10e00,0x0,0x100,0x1c,0x10e00,0x10e00,0x1c,0x1c,0x1c,0x1c,0xa00,0x0,0x0,0x0,0xc0,0x0,0xc0,0x80,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[18];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public ShellParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public ShellParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ShellParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ShellParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public ShellParser(ShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ShellParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector<int[]> jj_expentries = new java.util.Vector<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[50];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 18; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
