/* Generated By:JavaCC: Do not edit this line. ShellParserConstants.java */
package org.xmlsh.sh.grammar;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ShellParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NEWLINE = 4;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int CSEMI = 6;
  /** RegularExpression Id. */
  int AND_IF = 7;
  /** RegularExpression Id. */
  int OR_IF = 8;
  /** RegularExpression Id. */
  int DSEMI = 9;
  /** RegularExpression Id. */
  int DGREAT = 10;
  /** RegularExpression Id. */
  int LESSGREAT = 11;
  /** RegularExpression Id. */
  int CLOBBER = 12;
  /** RegularExpression Id. */
  int DLESSMINUS = 13;
  /** RegularExpression Id. */
  int DLESS = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int ELIF = 16;
  /** RegularExpression Id. */
  int THEN = 17;
  /** RegularExpression Id. */
  int ELSE = 18;
  /** RegularExpression Id. */
  int FI = 19;
  /** RegularExpression Id. */
  int DO = 20;
  /** RegularExpression Id. */
  int DONE = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int ESAC = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int UNTIL = 25;
  /** RegularExpression Id. */
  int FOR = 26;
  /** RegularExpression Id. */
  int LBRACE = 27;
  /** RegularExpression Id. */
  int BANG = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int LPAREN2 = 30;
  /** RegularExpression Id. */
  int RBRACE = 31;
  /** RegularExpression Id. */
  int IN = 32;
  /** RegularExpression Id. */
  int LESS = 33;
  /** RegularExpression Id. */
  int GT = 34;
  /** RegularExpression Id. */
  int TGT = 35;
  /** RegularExpression Id. */
  int TGTAND1 = 36;
  /** RegularExpression Id. */
  int GTAND = 37;
  /** RegularExpression Id. */
  int GTAND2 = 38;
  /** RegularExpression Id. */
  int LTAND = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int AMP = 41;
  /** RegularExpression Id. */
  int SEMI = 42;
  /** RegularExpression Id. */
  int PIPE = 43;
  /** RegularExpression Id. */
  int BIGQUOTE = 44;
  /** RegularExpression Id. */
  int NAME = 45;
  /** RegularExpression Id. */
  int XEXPR = 46;
  /** RegularExpression Id. */
  int WORD = 47;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 48;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 49;
  /** RegularExpression Id. */
  int VAR_EXPANSION = 50;
  /** RegularExpression Id. */
  int VAR_SUBPROC = 51;
  /** RegularExpression Id. */
  int VAR_SUBPROC_FILE = 52;
  /** RegularExpression Id. */
  int ASSIGN_WORD = 53;
  /** RegularExpression Id. */
  int VARNAME = 54;
  /** RegularExpression Id. */
  int FUNC_DECL = 55;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int CMD = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "<SINGLE_LINE_COMMENT>",
    "\";\"",
    "\"&&\"",
    "\"||\"",
    "\";;\"",
    "\">>\"",
    "\"<>\"",
    "\">|\"",
    "\"<<-\"",
    "\"<<\"",
    "\"if\"",
    "\"elif\"",
    "\"then\"",
    "\"else\"",
    "\"fi\"",
    "\"do\"",
    "\"done\"",
    "\"case\"",
    "\"esac\"",
    "\"while\"",
    "\"until\"",
    "\"for\"",
    "\"{\"",
    "\"!\"",
    "\"(\"",
    "\"(\"",
    "\"}\"",
    "\"in\"",
    "\"<\"",
    "\">\"",
    "\"2>\"",
    "\"2>&1\"",
    "\">&\"",
    "\"1>&2\"",
    "\"<&\"",
    "\")\"",
    "\"&\"",
    "\";\"",
    "\"|\"",
    "\"<{{\"",
    "<NAME>",
    "\"<[\"",
    "<WORD>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<VAR_EXPANSION>",
    "<VAR_SUBPROC>",
    "<VAR_SUBPROC_FILE>",
    "<ASSIGN_WORD>",
    "<VARNAME>",
    "<FUNC_DECL>",
  };

}
